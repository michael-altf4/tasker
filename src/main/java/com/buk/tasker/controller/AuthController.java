package com.buk.tasker.controller;

import com.buk.tasker.model.User;
import com.buk.tasker.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class AuthController {

    public AuthController(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    @GetMapping("/login")
    public String showLoginForm() {
        return "login";
    }
    @Autowired
    private final UserRepository userRepository;
    @Autowired
    private final PasswordEncoder passwordEncoder;

    @GetMapping("/register")
    public String showRegisterForm() {
        return "register";
    }

    @PostMapping("/register")
    public String registerUser(
            @RequestParam String username,
            @RequestParam String password,
            @RequestParam String confirmPassword,
            Model model) {

        // 1. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –ø–æ–ª—è –Ω–µ –ø—É—Å—Ç—ã–µ
        if (username == null || username.trim().isEmpty()) {
            model.addAttribute("error", "–õ–æ–≥–∏–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
            return "register";
        }

        if (password == null || password.isEmpty()) {
            model.addAttribute("error", "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
            return "register";
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
        if (!password.equals(confirmPassword)) {
            model.addAttribute("error", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
            model.addAttribute("username", username);
            return "register";
        }

        // 3. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –ª–æ–≥–∏–Ω —É–Ω–∏–∫–∞–ª–µ–Ω
        if (userRepository.findByUsername(username).isPresent()) {
            model.addAttribute("error", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            model.addAttribute("username", username);
            return "register";
        }

        // 4. –°–æ–∑–¥–∞–π –∏ —Å–æ—Ö—Ä–∞–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User user = new User();
        user.setUsername(username);
        user.setPassword(passwordEncoder.encode(password)); // üîê –•–µ—à–∏—Ä—É–µ–º!

        userRepository.save(user);

        // 5. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏ –Ω–∞ –≤—Ö–æ–¥ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ-–≤—Ö–æ–¥)
        return "redirect:/login?registered=true";
    }
}